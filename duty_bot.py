#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import random
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from flask import Flask, request
from sqlalchemy import create_engine, Column, Integer, String, MetaData, Table
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import OperationalError, IntegrityError

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "8347643283:AAFKD80QRaKeU_g0A1Eav7UVVKHieOpUIKA"
ADMIN_USERNAMES = ["phsquadd", "saduevvv18"]
WEBHOOK_URL = "https://nojack.onrender.com"
DATABASE_URL = os.environ.get('DATABASE_URL')

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ---
db_available = False
db_session = None
try:
    if not DATABASE_URL:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    engine = create_engine(DATABASE_URL)
    metadata = MetaData()
    students = Table('students', metadata,
        Column('id', Integer, primary_key=True),
        Column('name', String(100), nullable=False),
        Column('username', String(100), unique=True, nullable=False)
    )
    current_pool = Table('current_pool', metadata,
        Column('id', Integer, primary_key=True),
        Column('username', String(100), unique=True, nullable=False)
    )
    last_winners = Table('last_winners', metadata,
        Column('id', Integer, primary_key=True),
        Column('name', String(100), nullable=False),
        Column('username', String(100), nullable=False)
    )
    metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    db_session = Session()
    db_available = True
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
except (ValueError, OperationalError) as e:
    print(f"!!! –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î: {e}")

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)
application = Application.builder().token(TOKEN).build()
app = Flask(__name__)

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î ---
def get_master_list_from_db():
    return [{"id": s.id, "name": s.name, "username": s.username} for s in db_session.query(students).order_by(students.c.name).all()]

def get_pool_from_db():
    return [s.username for s in db_session.query(current_pool).all()]

def get_winners_from_db():
    return [{"name": s.name, "username": s.username} for s in db_session.query(last_winners).all()]

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    message = (f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
               "–Ø –±–æ—Ç-—Ä—É–ª–µ—Ç–∫–∞ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é.\n\n"
               "`/list` - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –æ—Å—Ç–∞–ª—Å—è –≤ —Ä—É–ª–µ—Ç–∫–µ.\n"
               "`/today` - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –¥–µ–∂—É—Ä–∏—Ç —Å–µ–≥–æ–¥–Ω—è.\n"
               "`/go` - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É (–∞–¥–º–∏–Ω).\n"
               "`/reset` - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª (–∞–¥–º–∏–Ω).\n"
               "`/manage` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–∞–¥–º–∏–Ω).")
    await update.message.reply_text(message)

# ... (–∫–æ–º–∞–Ω–¥—ã go, list, reset, today –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def go(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    pool_usernames = get_pool_from_db()
    if not pool_usernames:
        await update.message.reply_text("üé≤ –ü—É–ª –ø—É—Å—Ç! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–∏–∫–ª –∫–æ–º–∞–Ω–¥–æ–π `/reset`.")
        return
    master_list = get_master_list_from_db()
    pool_students = [s for s in master_list if s['username'] in pool_usernames]
    if len(pool_students) < 2:
        winner = pool_students[0]
        db_session.query(current_pool).delete()
        db_session.query(last_winners).delete()
        db_session.execute(last_winners.insert().values(name=winner['name'], username=winner['username']))
        db_session.commit()
        message = (f"üèÜ –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ—Ä–æ–π: {winner['name']} ({winner['username']})!\n\n"
                   "–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ `/reset`.")
        await update.message.reply_text(message)
        return
    winners = random.sample(pool_students, 2)
    for winner in winners:
        db_session.query(current_pool).filter(current_pool.c.username == winner['username']).delete()
    db_session.query(last_winners).delete()
    for winner in winners:
        db_session.execute(last_winners.insert().values(name=winner['name'], username=winner['username']))
    db_session.commit()
    new_pool_count = db_session.query(current_pool).count()
    message = (f"‚ú® –†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç:\n\n"
               f"üë§ {winners[0]['name']} ({winners[0]['username']})\n"
               f"üë§ {winners[1]['name']} ({winners[1]['username']})\n\n"
               f"–í —Ä—É–ª–µ—Ç–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å {new_pool_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    await update.message.reply_text(message)

async def list_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool_usernames = get_pool_from_db()
    if not pool_usernames:
        await update.message.reply_text("üé≤ –ü—É–ª –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç.")
        return
    master_list = get_master_list_from_db()
    pool_students = [s for s in master_list if s['username'] in pool_usernames]
    participant_lines = [f"üë§ {p['name']} ({p['username']})" for p in pool_students]
    message = "üë• –í —Ä—É–ª–µ—Ç–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å:\n\n" + "\n".join(participant_lines)
    await update.message.reply_text(message)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    master_list = get_master_list_from_db()
    if not master_list:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ `/manage`.")
        return
    db_session.query(current_pool).delete()
    for student in master_list:
        try:
            db_session.execute(current_pool.insert().values(username=student['username']))
        except IntegrityError:
            db_session.rollback()
            continue
    db_session.query(last_winners).delete()
    db_session.commit()
    message = f"‚úÖ –ù–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω! –í —Ä—É–ª–µ—Ç–∫—É —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(master_list)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    await update.message.reply_text(message)

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    winners = get_winners_from_db()
    if not winners:
        await update.message.reply_text("ü§î –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return
    if len(winners) == 2:
        message = (f"üëÆ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç:\n\n"
                   f"üë§ {winners[0]['name']} ({winners[0]['username']})\n"
                   f"üë§ {winners[1]['name']} ({winners[1]['username']})")
    else:
        message = f"ü¶∏‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ—Ä–æ–π: {winners[0]['name']} ({winners[0]['username']})"
    await update.message.reply_text(message)

# --- –ù–û–í–´–ô –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò –ß–ï–†–ï–ó –ë–î ---
async def manage_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='manage_add')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='manage_remove')],
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data='manage_list')],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='manage_close')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command = query.data

    if command == 'manage_add':
        context.user_data['next_step'] = 'add_user'
        await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ò–º—è –§–∞–º–∏–ª–∏—è @username`")
    
    elif command == 'manage_list':
        master_list = get_master_list_from_db()
        if not master_list:
            text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
        else:
            user_lines = [f"üë§ {user['name']} ({user['username']})" for user in master_list]
            text = "üìã **–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n" + "\n".join(user_lines)
        await query.edit_message_text(text=text, reply_markup=query.message.reply_markup)

    elif command == 'manage_remove':
        master_list = get_master_list_from_db()
        if not master_list:
            await query.edit_message_text(text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –Ω–µ–∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=query.message.reply_markup)
            return
        keyboard = [[InlineKeyboardButton(f"‚ùå {user['name']}", callback_data=f"remove_{user['id']}")] for user in master_list]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_manage')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

    elif command.startswith('remove_'):
        user_id_to_remove = int(query.data.split('_', 1)[1])
        user_to_remove = db_session.query(students).filter(students.c.id == user_id_to_remove).first()
        if user_to_remove:
            db_session.query(students).filter(students.c.id == user_id_to_remove).delete()
            db_session.query(current_pool).filter(current_pool.c.username == user_to_remove.username).delete()
            db_session.commit()
            await query.edit_message_text(text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_remove.name} —É–¥–∞–ª–µ–Ω –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤.")
        else:
            await query.edit_message_text(text="‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif command == 'back_to_manage':
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='manage_add')],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='manage_remove')],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data='manage_list')],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='manage_close')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', reply_markup=reply_markup)

    elif command == 'manage_close':
        await query.edit_message_text(text="–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('next_step') == 'add_user':
        del context.user_data['next_step']
        text = update.message.text
        try:
            parts = text.split('@')
            if len(parts) != 2 or not parts[0].strip() or not parts[1].strip():
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            name = parts[0].strip()
            username = "@" + parts[1].strip()
            db_session.execute(students.insert().values(name=name, username=username))
            db_session.commit()
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} ({username}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        except IntegrityError:
            db_session.rollback()
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç: `–ò–º—è –§–∞–º–∏–ª–∏—è @username`")
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# --- –ë–õ–û–ö –ó–ê–ü–£–°–ö–ê ---
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("go", go))
application.add_handler(CommandHandler("list", list_participants))
application.add_handler(CommandHandler("reset", reset))
application.add_handler(CommandHandler("today", today))
application.add_handler(CommandHandler("manage", manage_users))
application.add_handler(CallbackQueryHandler(button_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == "POST":
        asyncio.run(handle_update(request.get_json()))
        return '', 200
    else:
        return "–ë–æ—Ç –∂–∏–≤ –∏ –∑–¥–æ—Ä–æ–≤!", 200

async def handle_update(update_data):
    async with application:
        await application.process_update(Update.de_json(update_data, application.bot))

async def setup_bot():
    if not db_available:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
    await application.initialize()
    await application.bot.set_webhook(url=WEBHOOK_URL, allowed_updates=Update.ALL_TYPES)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    await application.start()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    if loop.is_running():
        loop.create_task(setup_bot())
    else:
        loop.run_until_complete(setup_bot())