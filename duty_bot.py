#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import random
import json
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from flask import Flask, request
from github import Github

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "8347643283:AAFKD80QRaKeU_g0A1Eav7UVVKHieOpUIKA"
ADMIN_USERNAMES = ["phsquadd", "saduevvv18"]
WEBHOOK_URL = "https://nojack.onrender.com"

# --- –ù–ê–°–¢–†–û–ô–ö–ò GITHUB (—á–∏—Ç–∞—é—Ç—Å—è –∏–∑ Render Environment) ---
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
REPO_NAME = os.environ.get('REPO_NAME')
FILE_PATH = "data/master_list.json"

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ö–ê–õ–¨–ù–´–• –§–ê–ô–õ–û–í ---
DATA_DIR = "data"
MASTER_LIST_FILE = os.path.join(DATA_DIR, "master_list.json")
CURRENT_POOL_FILE = os.path.join(DATA_DIR, "current_pool.json")
LAST_WINNERS_FILE = os.path.join(DATA_DIR, "last_winners.json")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
application = Application.builder().token(TOKEN).build()
app = Flask(__name__)
github_api = Github(GITHUB_TOKEN) if GITHUB_TOKEN else None
repo = github_api.get_repo(REPO_NAME) if github_api and REPO_NAME else None

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def setup_files():
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
    try:
        if repo:
            file_content = repo.get_contents(FILE_PATH).decoded_content.decode('utf-8')
            with open(MASTER_LIST_FILE, 'w', encoding='utf-8') as f:
                f.write(file_content)
            logger.info("–ú–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å GitHub.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª —Å GitHub: {e}. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
        save_data([], MASTER_LIST_FILE)

def load_data(file_path):
    if not os.path.exists(file_path): return []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []

def save_data(data, file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ù–ê GITHUB ---
async def save_master_list_to_github(new_data, commit_message, context: ContextTypes.DEFAULT_TYPE):
    if not repo:
        await context.bot.send_message(chat_id=context._chat_id, text="‚ùå –û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ GitHub. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return False
    try:
        file = repo.get_contents(FILE_PATH)
        new_content = json.dumps(new_data, ensure_ascii=False, indent=4)
        repo.update_file(file.path, commit_message, new_content, file.sha)
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ GitHub: {commit_message}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ GitHub: {e}")
        await context.bot.send_message(chat_id=context._chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ GitHub: {e}")
        return False

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø –±–æ—Ç-—Ä—É–ª–µ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö.\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "`/list` - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –æ—Å—Ç–∞–ª—Å—è –≤ —Ä—É–ª–µ—Ç–∫–µ.\n"
        "`/today` - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –¥–µ–∂—É—Ä–∏—Ç —Å–µ–≥–æ–¥–Ω—è.\n"
        "`/go` - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
        "`/reset` - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
        "`/manage` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."
    )
    await update.message.reply_text(message)

async def go(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏.")
        return
    pool = load_data(CURRENT_POOL_FILE)
    if not pool:
        await update.message.reply_text("üé≤ –ü—É–ª –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–∏–∫–ª –∫–æ–º–∞–Ω–¥–æ–π `/reset`.")
        return
    if len(pool) < 2:
        winner = pool[0]
        save_data([], CURRENT_POOL_FILE)
        save_data([winner], LAST_WINNERS_FILE)
        message = (f"üèÜ –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ—Ä–æ–π: {winner['name']} ({winner['username']})!\n\n"
                   "–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ `/reset`.")
        await update.message.reply_text(message)
        return
    winners = random.sample(pool, 2)
    new_pool = [p for p in pool if p not in winners]
    save_data(new_pool, CURRENT_POOL_FILE)
    save_data(winners, LAST_WINNERS_FILE)
    message = (f"‚ú® –†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç:\n\n"
               f"üë§ {winners[0]['name']} ({winners[0]['username']})\n"
               f"üë§ {winners[1]['name']} ({winners[1]['username']})\n\n"
               f"–í —Ä—É–ª–µ—Ç–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å {len(new_pool)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    await update.message.reply_text(message)

async def list_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = load_data(CURRENT_POOL_FILE)
    if not pool:
        await update.message.reply_text("üé≤ –ü—É–ª –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç.")
        return
    participant_lines = [f"üë§ {p['name']} ({p['username']})" for p in pool]
    message = "üë• –í —Ä—É–ª–µ—Ç–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å:\n\n" + "\n".join(participant_lines)
    await update.message.reply_text(message)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    master_list = load_data(MASTER_LIST_FILE)
    if not master_list:
        await update.message.reply_text("‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ `/manage`.")
        return
    save_data(master_list, CURRENT_POOL_FILE)
    save_data([], LAST_WINNERS_FILE)
    message = f"‚úÖ –ù–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω! –í —Ä—É–ª–µ—Ç–∫—É —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(master_list)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    await update.message.reply_text(message)

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_winners = load_data(LAST_WINNERS_FILE)
    if not last_winners:
        await update.message.reply_text("ü§î –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return
    if len(last_winners) == 2:
        message = (f"üëÆ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç:\n\n"
                   f"üë§ {last_winners[0]['name']} ({last_winners[0]['username']})\n"
                   f"üë§ {last_winners[1]['name']} ({last_winners[1]['username']})")
    else:
        message = f"ü¶∏‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ—Ä–æ–π: {last_winners[0]['name']} ({last_winners[0]['username']})"
    await update.message.reply_text(message)

async def manage_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='manage_add')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='manage_remove')],
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data='manage_list')],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='manage_close')],
    ]
    reply_markup = InlineKeyboardMa