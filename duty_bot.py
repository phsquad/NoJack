#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import random
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from flask import Flask, request

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "8347643283:AAFKD80QRaKeU_g0A1Eav7UVVKHieOpUIKA" # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
ADMIN_USERNAMES = ["phsquadd", "saduevvv18"]
# URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://duty-telegram-bot.onrender.com)
# –í—ã —É–∑–Ω–∞–µ—Ç–µ –µ–≥–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è. –ü–æ–∫–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º.
WEBHOOK_URL = "https://nojack.onrender.com"

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –§–ê–ô–õ–û–í –ò –î–ê–ù–ù–´–• ---
# –ù–∞ Render —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è.
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –Ω—É–∂–µ–Ω –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ —Å –¥–∏—Å–∫–æ–º.
# –ù–æ –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —ç—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º–æ.
DATA_DIR = "data"
MASTER_LIST_FILE = os.path.join(DATA_DIR, "master_list.json")
CURRENT_POOL_FILE = os.path.join(DATA_DIR, "current_pool.json")
LAST_WINNERS_FILE = os.path.join(DATA_DIR, "last_winners.json")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---
application = Application.builder().token(TOKEN).build()
app = Flask(__name__) # –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def setup_files():
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
    if not os.path.exists(MASTER_LIST_FILE):
        # –í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /manage
        save_data([], MASTER_LIST_FILE)
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª: {MASTER_LIST_FILE}")

def load_data(file_path):
    if not os.path.exists(file_path): return []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []

def save_data(data, file_path):
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø –±–æ—Ç-—Ä—É–ª–µ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "**–î–ª—è –≤—Å–µ—Ö:**\n"
        "`/list` - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –µ—â–µ –æ—Å—Ç–∞–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ.\n"
        "`/today` - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –¥–µ–∂—É—Ä–∏—Ç —Å–µ–≥–æ–¥–Ω—è.\n\n"
        "**–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n"
        "`/go` - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É.\n"
        "`/reset` - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª –¥–µ–∂—É—Ä—Å—Ç–≤.\n"
        "`/manage` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )
    await update.message.reply_text(message)

async def go(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏.")
        return
    pool = load_data(CURRENT_POOL_FILE)
    if not pool:
        await update.message.reply_text("üé≤ –ü—É–ª –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª –∫–æ–º–∞–Ω–¥–æ–π `/reset`.")
        return
    if len(pool) < 2:
        winner = pool[0] if pool else None
        if not winner:
            await update.message.reply_text("üé≤ –í –ø—É–ª–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–µ—Ä–æ—è.")
            return
        save_data([], CURRENT_POOL_FILE)
        save_data([winner], LAST_WINNERS_FILE)
        message = (f"üèÜ –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ—Ä–æ–π: {winner['name']} ({winner['username']})!\n\n"
                   "–í—Å–µ –æ—Ç–¥–µ–∂—É—Ä–∏–ª–∏. –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ `/reset`.")
        await update.message.reply_text(message)
        return
    winners = random.sample(pool, 2)
    new_pool = [p for p in pool if p not in winners]
    save_data(new_pool, CURRENT_POOL_FILE)
    save_data(winners, LAST_WINNERS_FILE)
    message = (f"‚ú® –†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –°–µ–≥–æ–¥–Ω—è –•—Ä–∞–Ω–∏—Ç–µ–ª–∏ –ü–æ—Ä—è–¥–∫–∞:\n\n"
               f"üë§ {winners[0]['name']} ({winners[0]['username']})\n"
               f"üë§ {winners[1]['name']} ({winners[1]['username']})\n\n"
               f"–í —Ä—É–ª–µ—Ç–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å {len(new_pool)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    await update.message.reply_text(message)

async def list_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = load_data(CURRENT_POOL_FILE)
    if not pool:
        await update.message.reply_text("üé≤ –ü—É–ª –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç. –ù–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.")
        return
    participant_lines = [f"üë§ {p['name']} ({p['username']})" for p in pool]
    message = "üë• –í —Ä—É–ª–µ—Ç–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å:\n\n" + "\n".join(participant_lines)
    await update.message.reply_text(message)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    master_list = load_data(MASTER_LIST_FILE)
    save_data(master_list, CURRENT_POOL_FILE)
    save_data([], LAST_WINNERS_FILE)
    message = f"‚úÖ –ù–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω! –í —Ä—É–ª–µ—Ç–∫—É —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(master_list)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    await update.message.reply_text(message)
    logger.info(f"–ü—É–ª —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{update.message.from_user.username}")

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_winners = load_data(LAST_WINNERS_FILE)
    if not last_winners:
        await update.message.reply_text("ü§î –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π `/go`.")
        return
    if len(last_winners) == 2:
        message = (f"üëÆ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç:\n\n"
                   f"üë§ {last_winners[0]['name']} ({last_winners[0]['username']})\n"
                   f"üë§ {last_winners[1]['name']} ({last_winners[1]['username']})")
    elif len(last_winners) == 1:
        message = f"ü¶∏‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ—Ä–æ–π: {last_winners[0]['name']} ({last_winners[0]['username']})"
    await update.message.reply_text(message)

async def manage_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='manage_add')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='manage_remove')],
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data='manage_list')],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='manage_close')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command = query.data
    if command == 'manage_add':
        context.user_data['next_step'] = 'add_user'
        await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ò–º—è –§–∞–º–∏–ª–∏—è @username`")
    elif command == 'manage_list':
        master_list = load_data(MASTER_LIST_FILE)
        if not master_list:
            text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
        else:
            user_lines = [f"üë§ {user['name']} ({user['username']})" for user in master_list]
            text = "üìã **–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n" + "\n".join(user_lines)
        await query.edit_message_text(text=text, reply_markup=query.message.reply_markup)
    elif command == 'manage_remove':
        master_list = load_data(MASTER_LIST_FILE)
        if not master_list:
            await query.edit_message_text(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –ù–µ–∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=query.message.reply_markup)
            return
        keyboard = [[InlineKeyboardButton(f"‚ùå {user['name']}", callback_data=f"remove_{user['username']}")] for user in master_list]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_manage')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    elif command.startswith('remove_'):
        username_to_remove = query.data.split('_', 1)[1]
        master_list = load_data(MASTER_LIST_FILE)
        user_to_remove = next((user for user in master_list if user['username'] == username_to_remove), None)
        if user_to_remove:
            master_list.remove(user_to_remove)
            save_data(master_list, MASTER_LIST_FILE)
            current_pool = load_data(CURRENT_POOL_FILE)
            current_pool = [user for user in current_pool if user['username'] != username_to_remove]
            save_data(current_pool, CURRENT_POOL_FILE)
            await query.edit_message_text(text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_remove['name']} —É–¥–∞–ª–µ–Ω.")
        else:
            await query.edit_message_text(text="‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif command == 'back_to_manage':
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='manage_add')],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='manage_remove')],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data='manage_list')],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='manage_close')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', reply_markup=reply_markup)
    elif command == 'manage_close':
        await query.edit_message_text(text="–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('next_step') == 'add_user':
        del context.user_data['next_step']
        text = update.message.text
        try:
            parts = text.split('@')
            if len(parts) != 2 or not parts[0].strip() or not parts[1].strip():
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            name = parts[0].strip()
            username = "@" + parts[1].strip()
            new_user = {"name": name, "username": username}
            master_list = load_data(MASTER_LIST_FILE)
            if any(user['username'] == new_user['username'] for user in master_list):
                await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
                return
            master_list.append(new_user)
            save_data(master_list, MASTER_LIST_FILE)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} ({username}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ò–º—è –§–∞–º–∏–ª–∏—è @username`")
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# --- –ù–û–í–´–ô –ë–õ–û–ö: –ó–ê–ü–£–°–ö –ß–ï–†–ï–ó WEBHOOK ---

@app.route('/', methods=['POST'])
def webhook():
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram."""
    update_data = request.get_json()
    update = Update.de_json(update_data, application.bot)
    application.create_task(application.process_update(update))
    return '', 200

def main():
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
    setup_files()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("go", go))
    application.add_handler(CommandHandler("list", list_participants))
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("today", today))
    application.add_handler(CommandHandler("manage", manage_users))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    application.create_task(application.bot.set_webhook(url=WEBHOOK_URL))
    logger.info("–í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")

if __name__ == "__main__":
    main()
    # –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π gunicorn –∏–∑ render.yaml,
    # –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ.