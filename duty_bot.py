#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import random
import json
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from flask import Flask, request

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "8347643283:AAFKD80QRaKeU_g0A1Eav7UVVKHieOpUIKA"
ADMIN_USERNAMES = ["phsquadd", "saduevvv18"]
WEBHOOK_URL = "https://nojack.onrender.com"

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –§–ê–ô–õ–û–í –ò –î–ê–ù–ù–´–• ---
DATA_DIR = "data"
MASTER_LIST_FILE = os.path.join(DATA_DIR, "master_list.json")
CURRENT_POOL_FILE = os.path.join(DATA_DIR, "current_pool.json")
LAST_WINNERS_FILE = os.path.join(DATA_DIR, "last_winners.json")

# --- –í–û–ó–í–†–ê–©–ê–ï–ú –ñ–ï–°–¢–ö–ò–ô –°–ü–ò–°–û–ö –°–¢–£–î–ï–ù–¢–û–í ---
INITIAL_STUDENTS = [
    {"name": "–ê–Ω–¥—Ä–µ–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "username": "@phsquadd"},
    {"name": "–ê–±—Ä–∞–º–µ–Ω–∫–æ –ü–∞–≤–µ–ª", "username": "@Pevlik12"},
    {"name": "–ê–Ω–¥—Ä–æ—Å–æ–≤ –ú–∞–∫–∞—Ä", "username": "@CalamitAss"},
    {"name": "–ì–æ–ª–æ–≤–∞–Ω—å –ï–ª–∏–∑–∞–≤–µ—Ç–∞", "username": "@Arp_ell"},
    {"name": "–î–æ–ª–æ–≥–æ–¥–∏–Ω –î–µ–Ω–∏—Å", "username": "@Gvstaxx"},
    {"name": "–î—É–¥–Ω–∏–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "username": "@llSirll"},
    {"name": "–ö—É–∑–Ω–µ—Ü–æ–≤ –ê—Ä—Ç–µ–º", "username": "@h0moxide"},
    {"name": "–ö—Ä–∏–≤–æ—à–µ–µ–≤ –ì—Ä–∏–≥–æ—Ä–∏–π", "username": "@SKOOKA2007"},
    {"name": "–ö–Ω—è–≥–∏–Ω–∏–Ω –í–∞–¥–∏–º", "username": "@Liro26"},
    {"name": "–ú–∞—Å–ª–µ–≤—Ü–æ–≤ –ò–≤–∞–Ω", "username": "@maslov_vvv"},
    {"name": "–°–∞–¥—É–µ–≤ –ê–∑–∞–º–∞—Ç", "username": "@saduevvv18"},
    {"name": "–ü—Ä–æ—â–∞–ª–∫–∏–Ω –î–º–∏—Ç—Ä–∏–π", "username": "@GopoChaechik"},
    {"name": "–°–∞—Ä—É—Ö–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "username": "@kk80968"},
    {"name": "–°–∞–º–æ–¥—É—Ä–æ–≤ –ï–ª–∏—Å–µ–π", "username": "@Prosto_EIKA"}
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---
application = Application.builder().token(TOKEN).build()
app = Flask(__name__)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def setup_files():
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
    # –¢–µ–ø–µ—Ä—å –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–∑ –∂–µ—Å—Ç–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
    save_data(INITIAL_STUDENTS, MASTER_LIST_FILE)
    logger.info(f"–°–æ–∑–¥–∞–Ω –º–∞—Å—Ç–µ—Ä-—Ñ–∞–π–ª –∏–∑ –∂–µ—Å—Ç–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞: {MASTER_LIST_FILE}")

def load_data(file_path):
    if not os.path.exists(file_path): return []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []

def save_data(data, file_path):
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø –±–æ—Ç-—Ä—É–ª–µ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö.\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "`/list` - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –æ—Å—Ç–∞–ª—Å—è –≤ —Ä—É–ª–µ—Ç–∫–µ.\n"
        "`/today` - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –¥–µ–∂—É—Ä–∏—Ç —Å–µ–≥–æ–¥–Ω—è.\n"
        "`/go` - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
        "`/reset` - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."
    )
    await update.message.reply_text(message)

async def go(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏.")
        return
    pool = load_data(CURRENT_POOL_FILE)
    if not pool:
        await update.message.reply_text("üé≤ –ü—É–ª –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–∏–∫–ª –∫–æ–º–∞–Ω–¥–æ–π `/reset`.")
        return
    if len(pool) < 2:
        winner = pool[0]
        save_data([], CURRENT_POOL_FILE)
        save_data([winner], LAST_WINNERS_FILE)
        message = (f"üèÜ –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ—Ä–æ–π: {winner['name']} ({winner['username']})!\n\n"
                   "–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ `/reset`.")
        await update.message.reply_text(message)
        return
    winners = random.sample(pool, 2)
    new_pool = [p for p in pool if p not in winners]
    save_data(new_pool, CURRENT_POOL_FILE)
    save_data(winners, LAST_WINNERS_FILE)
    message = (f"‚ú® –†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç:\n\n"
               f"üë§ {winners[0]['name']} ({winners[0]['username']})\n"
               f"üë§ {winners[1]['name']} ({winners[1]['username']})\n\n"
               f"–í —Ä—É–ª–µ—Ç–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å {len(new_pool)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    await update.message.reply_text(message)

async def list_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = load_data(CURRENT_POOL_FILE)
    if not pool:
        await update.message.reply_text("üé≤ –ü—É–ª –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç.")
        return
    participant_lines = [f"üë§ {p['name']} ({p['username']})" for p in pool]
    message = "üë• –í —Ä—É–ª–µ—Ç–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å:\n\n" + "\n".join(participant_lines)
    await update.message.reply_text(message)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    master_list = load_data(MASTER_LIST_FILE)
    save_data(master_list, CURRENT_POOL_FILE)
    save_data([], LAST_WINNERS_FILE)
    message = f"‚úÖ –ù–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω! –í —Ä—É–ª–µ—Ç–∫—É —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(master_list)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    await update.message.reply_text(message)

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_winners = load_data(LAST_WINNERS_FILE)
    if not last_winners:
        await update.message.reply_text("ü§î –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return
    if len(last_winners) == 2:
        message = (f"üëÆ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç:\n\n"
                   f"üë§ {last_winners[0]['name']} ({last_winners[0]['username']})\n"
                   f"üë§ {last_winners[1]['name']} ({last_winners[1]['username']})")
    else:
        message = f"ü¶∏‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ—Ä–æ–π: {last_winners[0]['name']} ({last_winners[0]['username']})"
    await update.message.reply_text(message)

# --- –§–ò–ù–ê–õ–¨–ù–´–ô, –£–ü–†–û–©–ï–ù–ù–´–ô –ë–õ–û–ö –ó–ê–ü–£–°–ö–ê ---

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à–∏ –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("go", go))
application.add_handler(CommandHandler("list", list_participants))
application.add_handler(CommandHandler("reset", reset))
application.add_handler(CommandHandler("today", today))

@app.route('/', methods=['GET', 'POST'])
def webhook():
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram."""
    if request.method == "POST":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏
        asyncio.run(handle_update(request.get_json()))
        return '', 200
    else:
        return "–ë–æ—Ç –∂–∏–≤ –∏ –∑–¥–æ—Ä–æ–≤!", 200

async def handle_update(update_data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    async with application:
        await application.process_update(Update.de_json(update_data, application.bot))

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫."""
    setup_files()
    await application.initialize()
    await application.bot.set_webhook(url=WEBHOOK_URL, allowed_updates=Update.ALL_TYPES)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    await application.start()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    if loop.is_running():
        loop.create_task(setup_bot())
    else:
        loop.run_until_complete(setup_bot())