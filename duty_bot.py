#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import random
import json
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from flask import Flask, request
from sqlalchemy import create_engine, Column, Integer, String, MetaData, Table
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import OperationalError

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "8347643283:AAFKD80QRaKeU_g0A1Eav7UVVKHieOpUIKA"
ADMIN_USERNAMES = ["phsquadd", "saduevvv18"]
WEBHOOK_URL = "https://nojack.onrender.com"

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ1: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —á–∏—Ç–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –±–µ—Ä–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Render, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–¥–µ–ª–∞–ª–∏
DATABASE_URL = os.environ.get('DATABASE_URL')

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ---
# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2: –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É, –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É ---
db_available = False
db_session = None
engine = None

if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL)
        metadata = MetaData()

        # –û–ø–∏—Å—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        students = Table('students', metadata,
            Column('id', Integer, primary_key=True),
            Column('name', String(100), nullable=False),
            Column('username', String(100), unique=True, nullable=False)
        )

        current_pool = Table('current_pool', metadata,
            Column('id', Integer, primary_key=True),
            Column('username', String(100), unique=True, nullable=False)
        )

        last_winners = Table('last_winners', metadata,
            Column('id', Integer, primary_key=True),
            Column('name', String(100), nullable=False),
            Column('username', String(100), nullable=False)
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        metadata.create_all(engine)
        Session = sessionmaker(bind=engine)
        db_session = Session()
        db_available = True
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        print(f"!!! –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {e}")
else:
    print("!!! –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
application = Application.builder().token(TOKEN).build()
app = Flask(__name__)

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î ---
def get_master_list_from_db():
    if not db_available: return []
    return [{"name": s.name, "username": s.username} for s in db_session.query(students).all()]

def get_pool_from_db():
    if not db_available: return []
    return [s.username for s in db_session.query(current_pool).all()]

def get_winners_from_db():
    if not db_available: return []
    return [{"name": s.name, "username": s.username} for s in db_session.query(last_winners).all()]

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –ë–î) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø –±–æ—Ç-—Ä—É–ª–µ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö.\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "`/list` - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –æ—Å—Ç–∞–ª—Å—è –≤ —Ä—É–ª–µ—Ç–∫–µ.\n"
        "`/today` - –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –¥–µ–∂—É—Ä–∏—Ç —Å–µ–≥–æ–¥–Ω—è.\n"
        "`/go` - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
        "`/reset` - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n\n"
        "**–í–ê–ñ–ù–û:** –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä."
    )
    await update.message.reply_text(message)

async def go(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏.")
        return
    
    pool_usernames = get_pool_from_db()
    if not pool_usernames:
        await update.message.reply_text("üé≤ –ü—É–ª –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–∏–∫–ª –∫–æ–º–∞–Ω–¥–æ–π `/reset`.")
        return

    master_list = get_master_list_from_db()
    pool_students = [s for s in master_list if s['username'] in pool_usernames]

    if len(pool_students) < 2:
        winner = pool_students[0]
        db_session.query(current_pool).delete()
        db_session.query(last_winners).delete()
        db_session.execute(last_winners.insert().values(name=winner['name'], username=winner['username']))
        db_session.commit()
        message = (f"üèÜ –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ—Ä–æ–π: {winner['name']} ({winner['username']})!\n\n"
                   "–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ `/reset`.")
        await update.message.reply_text(message)
        return

    winners = random.sample(pool_students, 2)
    
    for winner in winners:
        db_session.query(current_pool).filter(current_pool.c.username == winner['username']).delete()
    
    db_session.query(last_winners).delete()
    for winner in winners:
        db_session.execute(last_winners.insert().values(name=winner['name'], username=winner['username']))
    db_session.commit()

    new_pool_count = db_session.query(current_pool).count()
    message = (f"‚ú® –†—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç:\n\n"
               f"üë§ {winners[0]['name']} ({winners[0]['username']})\n"
               f"üë§ {winners[1]['name']} ({winners[1]['username']})\n\n"
               f"–í —Ä—É–ª–µ—Ç–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å {new_pool_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    await update.message.reply_text(message)

async def list_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool_usernames = get_pool_from_db()
    if not pool_usernames:
        await update.message.reply_text("üé≤ –ü—É–ª –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç.")
        return
    
    master_list = get_master_list_from_db()
    pool_students = [s for s in master_list if s['username'] in pool_usernames]
    
    participant_lines = [f"üë§ {p['name']} ({p['username']})" for p in pool_students]
    message = "üë• –í —Ä—É–ª–µ—Ç–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å:\n\n" + "\n".join(participant_lines)
    await update.message.reply_text(message)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username not in ADMIN_USERNAMES:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
        
    master_list = get_master_list_from_db()
    
    db_session.query(current_pool).delete()
    for student in master_list:
        db_session.execute(current_pool.insert().values(username=student['username']))
    
    db_session.query(last_winners).delete()
    db_session.commit()
    
    message = f"‚úÖ –ù–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω! –í —Ä—É–ª–µ—Ç–∫—É —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(master_list)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    await update.message.reply_text(message)

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    winners = get_winners_from_db()
    if not winners:
        await update.message.reply_text("ü§î –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return
    if len(winners) == 2:
        message = (f"üëÆ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç:\n\n"
                   f"üë§ {winners[0]['name']} ({winners[0]['username']})\n"
                   f"üë§ {winners[1]['name']} ({winners[1]['username']})")
    else:
        message = f"ü¶∏‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ—Ä–æ–π: {winners[0]['name']} ({winners[0]['username']})"
    await update.message.reply_text(message)

# --- –ë–õ–û–ö –ó–ê–ü–£–°–ö–ê ---
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("go", go))
application.add_handler(CommandHandler("list", list_participants))
application.add_handler(CommandHandler("reset", reset))
application.add_handler(CommandHandler("today", today))

@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == "POST":
        asyncio.run(handle_update(request.get_json()))
        return '', 200
    else:
        return "–ë–æ—Ç –∂–∏–≤ –∏ –∑–¥–æ—Ä–æ–≤!", 200

async def handle_update(update_data):
    async with application:
        await application.process_update(Update.de_json(update_data, application.bot))

async def setup_bot():
    if not db_available:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
    await application.initialize()
    await application.bot.set_webhook(url=WEBHOOK_URL, allowed_updates=Update.ALL_TYPES)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    await application.start()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    if loop.is_running():
        loop.create_task(setup_bot())
    else:
        loop.run_until_complete(setup_bot())