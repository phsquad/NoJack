import os
from sqlalchemy import create_engine, Column, Integer, String, MetaData, Table, Boolean
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import IntegrityError

# --- –ù–ê–°–¢–†–û–ô–ö–ò (–ó–ê–ü–û–õ–ù–ò–¢–ï –°–ê–ú–ò) ---
# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ "External Connection String" –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
DATABASE_URL = "postgresql://duty_bot_memory_lu9y_user:Nii1uyhvLh2YbgK7o8jOvwLGmQ5qquKZ@dpg-d42eidh5pdvs73e7e83g-a.oregon-postgres.render.com/duty_bot_memory_lu9y"
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–∫–∞—è –∂–µ, –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
engine = create_engine(DATABASE_URL)
metadata = MetaData()
students = Table('students', metadata,
    Column('id', Integer, primary_key=True),
    Column('name', String(100), nullable=False),
    Column('username', String(100), unique=True, nullable=False),
    Column('duty_count', Integer, default=0),
    Column('duty_debt', Integer, default=0),
    Column('chat_id', String(100), nullable=True),
    Column('is_active', Boolean, default=True)
)
metadata.create_all(engine)
Session = sessionmaker(bind=engine)
db_session = Session()

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def main():
    while True:
        clear_screen()
        print("--- –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö) ---")
        all_students = db_session.query(students).order_by(students.c.name).all()
        print("\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:")
        if not all_students:
            print("  (–ø—É—Å—Ç–æ)")
        else:
            for i, user in enumerate(all_students, 1):
                print(f"  {i}. {user.name} ({user.username}) - –î–µ–∂—É—Ä—Å—Ç–≤: {user.duty_count}")
        
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("  1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  2. ‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  3. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤") # –ù–û–í–ê–Ø –û–ü–¶–ò–Ø
        print("  4. üö™ –í—ã–π—Ç–∏")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ")

        if choice == '1':
            name = input("–í–≤–µ–¥–∏—Ç–µ –ò–º—è –§–∞–º–∏–ª–∏—é: ").strip()
            username = input("–í–≤–µ–¥–∏—Ç–µ username (–Ω–∞—á–∏–Ω–∞—è —Å @): ").strip()
            if name and username.startswith('@'):
                try:
                    db_session.execute(students.insert().values(name=name, username=username, duty_count=0, duty_debt=0, is_active=True))
                    db_session.commit()
                    print(f"\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –¥–æ–±–∞–≤–ª–µ–Ω.")
                except IntegrityError:
                    db_session.rollback()
                    print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            else:
                print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

        elif choice == '2':
            if not all_students:
                print("\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –Ω–µ–∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                continue
            try:
                num_to_remove = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
                if 1 <= num_to_remove <= len(all_students):
                    user_to_remove = all_students[num_to_remove - 1]
                    db_session.query(students).filter(students.c.id == user_to_remove.id).delete()
                    db_session.commit()
                    print(f"\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_remove.name} —É–¥–∞–ª–µ–Ω.")
                else:
                    print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
            except ValueError:
                print("\n‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

        # --- –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ---
        elif choice == '3':
            if not all_students:
                print("\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                continue
            try:
                num_to_edit = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "))
                if 1 <= num_to_edit <= len(all_students):
                    user_to_edit = all_students[num_to_edit - 1]
                    new_count_str = input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∂—É—Ä—Å—Ç–≤ –¥–ª—è {user_to_edit.name}: ")
                    new_count = int(new_count_str)
                    
                    db_session.execute(
                        students.update().where(students.c.id == user_to_edit.id).values(duty_count=new_count)
                    )
                    db_session.commit()
                    print(f"\n‚úÖ –°—á–µ—Ç—á–∏–∫ –¥–ª—è {user_to_edit.name} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_count}.")
                else:
                    print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
            except ValueError:
                print("\n‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

        elif choice == '4':
            print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()